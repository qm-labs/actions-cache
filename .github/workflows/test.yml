name: test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Install Yarn
        run: npm install -g yarn
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Deps
        run: yarn install --pure-lockfile
      - name: Build & Test
        run: yarn test
      - name: Ensure dist/ folder is up-to-date
        run: |
          yarn build
          if [ "$(git diff --ignore-space-at-eol | wc -l)" -gt "0" ]; then
            echo "Detected uncommitted changes after build.  See status below:"
            git diff
            exit 1
          fi

  create-minio-bucket:
    runs-on: ubuntu-latest
    steps:
      - run: |
          wget -q https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod a+x mc
          ./mc mb play/actions-cache || exit 0

  test-save:
    needs: create-minio-bucket
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate files in working directory
        shell: bash
        run: src/create-cache-files.sh ${{ runner.os }} test-cache
      - name: Generate files outside working directory
        shell: bash
        run: src/create-cache-files.sh ${{ runner.os }} ~/test-cache
      - name: Save cache
        uses: ./
        with:
          endpoint: play.min.io
          accessKey: "Q3AM3UQ867SPQQA43P2F"
          secretKey: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
          bucket: actions-cache
          use-fallback: false
          key: test-${{ runner.os }}-${{ github.run_id }}
          path: |
            test-cache
            ~/test-cache

  test-restore:
    needs: test-save
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore cache
        uses: ./
        with:
          endpoint: play.min.io
          accessKey: "Q3AM3UQ867SPQQA43P2F"
          secretKey: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
          bucket: actions-cache
          use-fallback: false
          key: test-${{ runner.os }}-${{ github.run_id }}
          path: |
            test-cache
            ~/test-cache
      - name: Verify cache files in working directory
        shell: bash
        run: src/verify-cache-files.sh ${{ runner.os }} test-cache
      - name: Verify cache files outside working directory
        shell: bash
        run: src/verify-cache-files.sh ${{ runner.os }} ~/test-cache

  test-restore-keys:
    needs: test-save
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore cache
        uses: ./
        with:
          endpoint: play.min.io
          accessKey: "Q3AM3UQ867SPQQA43P2F"
          secretKey: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
          bucket: actions-cache
          use-fallback: false
          key: test-${{ runner.os }}-${{ github.run_id }}-${{ github.sha }}
          path: |
            test-cache
            ~/test-cache
          restore-keys: test-${{ runner.os }}-
      - name: Verify cache files in working directory
        shell: bash
        run: src/verify-cache-files.sh ${{ runner.os }} test-cache
      - name: Verify cache files outside working directory
        shell: bash
        run: src/verify-cache-files.sh ${{ runner.os }} ~/test-cache

  test-saveOnFailure-default-failed-setup:
    name: Setup failed job for when saveOnFailure is not specified (this job should always fail)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore cache
        uses: ./
        with:
          endpoint: play.min.io
          accessKey: "Q3AM3UQ867SPQQA43P2F"
          secretKey: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
          bucket: actions-cache
          use-fallback: false
          key: test-saveOnFailure-default-failed-${{ github.run_id }}-${{ github.sha }}
          path: |
            test-save-input
          restore-keys: test-saveOnFailure-default-failed-${{ github.run_id }}-${{ github.sha }}
      - name: Populate cached file locally, then fail
        shell: bash
        run: |
          echo ${{ github.run_id }}-${{ github.run_attempt }} > test-save-input
          exit 1

  test-saveOnFailure-default-failed-assert:
    name: Assert cache was not saved when saveOnFailure is not specified and job failed
    needs: test-saveOnFailure-default-failed-setup
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore cache
        uses: ./
        with:
          endpoint: play.min.io
          accessKey: "Q3AM3UQ867SPQQA43P2F"
          secretKey: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
          bucket: actions-cache
          use-fallback: false
          key: test-saveOnFailure-default-failed-${{ github.run_id }}-${{ github.sha }}
          path: |
            test-save-input
          restore-keys: test-saveOnFailure-default-failed-${{ github.run_id }}-${{ github.sha }}
      - name: Assert cache was not saved in setup job
        shell: bash
        run: |
          if [ -f test-save-input ]; then
            echo 'File "test-save-input" should not exist, test failed!'
            exit 1
          fi

  test-saveOnFailure-true-setup:
    name: Setup failed job for when saveOnFailure=true (this job should always fail)
    runs-on: ubuntu-latest
    outputs:
      cachedContents: ${{ steps.populate-cache-then-fail.outputs.cachedContents }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore cache
        uses: ./
        with:
          endpoint: play.min.io
          accessKey: "Q3AM3UQ867SPQQA43P2F"
          secretKey: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
          bucket: actions-cache
          use-fallback: false
          key: test-saveOnFailure-true-${{ github.run_id }}-${{ github.sha }}
          path: |
            test-save-input
          restore-keys: test-saveOnFailure-true-${{ github.run_id }}-${{ github.sha }}
          saveOnFailure: "true"
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Populate cached file locally, then fail
        id: populate-cache-then-fail
        shell: bash
        run: |
          cached_contents="${{ github.run_id }}-${{ github.run_attempt }}"
          echo "::set-output name=cachedContents::$cached_contents"
          echo "$cached_contents" > test-save-input
          exit 1

  test-save-input-true-assert:
    name: Assertion test for saveOnFailure
    needs: test-saveOnFailure-true-setup
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Restore cache
        uses: ./
        with:
          endpoint: play.min.io
          accessKey: "Q3AM3UQ867SPQQA43P2F"
          secretKey: "zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"
          bucket: actions-cache
          use-fallback: false
          key: test-saveOnFailure-true-${{ github.run_id }}-${{ github.sha }}
          path: |
            test-save-input
          restore-keys: test-saveOnFailure-true-${{ github.run_id }}-${{ github.sha }}
      - name: Assert cache was not saved in setup job
        shell: bash
        run: |
          if [ -f test-save-input ]; then
            expected_contents="${{ needs.test-saveOnFailure-true-setup.outputs.cachedContents }}"
            if ! grep -Fq "$expected_contents" test-save-input; then
              echo "Contents of file \"test-save-input\": $(cat test-save-input)"
              echo "Expected contents: $expected_contents"
              echo "Test failed!"
              exit 1
            fi
          else
            echo 'File "test-save-input" should exist, test failed!'
            exit 1
          fi

